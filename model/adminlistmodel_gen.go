// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	adminListFieldNames          = builder.RawFieldNames(&AdminList{})
	adminListRows                = strings.Join(adminListFieldNames, ",")
	adminListRowsExpectAutoSet   = strings.Join(stringx.Remove(adminListFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	adminListRowsWithPlaceHolder = strings.Join(stringx.Remove(adminListFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	adminListModel interface {
		Insert(ctx context.Context, data *AdminList) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AdminList, error)
		Update(ctx context.Context, data *AdminList) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAdminListModel struct {
		conn  sqlx.SqlConn
		table string
	}

	AdminList struct {
		Id         int64     `db:"id"`          // 主键ID
		Uid        int64     `db:"uid"`         // 币虎用户id
		ChatId     int64     `db:"chat_id"`     // tg_id
		GroupId    int64     `db:"group_id"`    // 群id
		GroupName  string    `db:"group_name"`  // 群名称
		Permission string    `db:"permission"`  // 权限
		UserName   string    `db:"user_name"`   // tg user_name
		FirstName  string    `db:"first_name"`  // tg first_name
		LastName   string    `db:"last_name"`   // tg last_name
		IsDelete   int64     `db:"is_delete"`   // 删除标识 0 未删除 1 已删除
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 修改时间
		Ctime      time.Time `db:"ctime"`       // 创建时间
		Mtime      time.Time `db:"mtime"`       // 修改时间
	}
)

func newAdminListModel(conn sqlx.SqlConn) *defaultAdminListModel {
	return &defaultAdminListModel{
		conn:  conn,
		table: "`admin_list`",
	}
}

func (m *defaultAdminListModel) Insert(ctx context.Context, data *AdminList) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, adminListRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Uid, data.ChatId, data.GroupId, data.GroupName, data.Permission, data.UserName, data.FirstName, data.LastName, data.IsDelete, data.Ctime, data.Mtime)
	return ret, err
}

func (m *defaultAdminListModel) FindOne(ctx context.Context, id int64) (*AdminList, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", adminListRows, m.table)
	var resp AdminList
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminListModel) Update(ctx context.Context, data *AdminList) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, adminListRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Uid, data.ChatId, data.GroupId, data.GroupName, data.Permission, data.UserName, data.FirstName, data.LastName, data.IsDelete, data.Ctime, data.Mtime, data.Id)
	return err
}

func (m *defaultAdminListModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAdminListModel) tableName() string {
	return m.table
}
